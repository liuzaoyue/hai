海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@云盘君@{"last_chapter_rule":"","title":"云盘君","author":"小棉袄🌞","url":"hiker://empty##fypage","version":46,"col_type":"movie_3","class_name":"","type":"video","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d = [];\naddListener(\n    'onRefresh', $.toString(() => {\n        clearMyVar('s')\n    })\n)\neval(JSON.parse(fetch(\"hiker://page/sou\")).rule);\nlet s = getMyVar('s', '');\nif (s == \"\") {\n    try {\n        if (MY_PAGE == 1) {\n\n            header = {\n                'User-Agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Mobile Safari/537.36',\n                'Host': 'top.baidu.com',\n                'Accept': 'application/json, text/plain, */*',\n                'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',\n                'Accept-Encoding': 'gzip, deflate, br',\n                'Referer': 'https://top.baidu.com/board?tab=novel',\n            }\n\n            let json = request('https://top.baidu.com/api/board?platform=wise&tab=teleplay&tag=%7B%22category%22:%22%E5%85%A8%E9%83%A8%E7%B1%BB%E5%9E%8B%22,%22country%22:%22%E6%AC%A7%E7%BE%8E%22%7D', {\n                headers: header\n            });\n\n            let list = JSON.parse(json).data.cards[0].content;\n\n            for (let i = 0; i < list.length; i++) {\n                let name = list[i].word + '    (' + list[i].show[2] + ')';\n                let des = list[i].desc;\n                d.push({\n                    title: i == \"0\" ? '““””<span style=\"color:#ff3300\">' + (parseInt(i) + 1).toString() + '</span>' + \"\\t\\t\\t\" + name : i == \"1\" ? '““””<span style=\"color:#ff6600\">' + (parseInt(i) + 1).toString() + '</span>' + \"\\t\\t\\t\" + name : i == \"2\" ? '““””<span style=\"color:#ff9900\">' + (parseInt(i) + 1).toString() + '</span>' + \"\\t\\t\\t\" + name : '““””<span>' + (parseInt(i) + 1).toString() + '</span>' + \"\\t\\t\\t\" + name,\n                    url: $('#noLoading#').lazyRule((name) => {\n                        name = name.split('    (')[0];\n                        putMyVar('s', name);\n                        refreshPage();\n                        return 'hiker://empty'\n                    }, name),\n                    desc: des,\n                    col_type: \"text_1\"\n                });\n            }\n        }\n    } catch (e) {}\n    setResult(d);\n}","search_url":"hiker://empty##**","group":"①网盘","searchFind":"js:\nvar d = [];\nlet key = MY_URL.split(\"##\")[1];\nd.push({\n    title: \"点我开始聚合搜索\" + key,\n    url: \"hiker://page/soup?p=fypage\",\n    extra: {\n        pageTitle: \"搜索\" + key,\n        key: key\n    }\n});\n\nsetResult(d);","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"initConfig({\n    subs: ['ass', 'srt', 'vtt',\"SRT\",\"ASS\",\"VTT\"]\n});","pages":"[{\"col_type\":\"movie_3\",\"name\":\"规则列表\",\"path\":\"data\",\"rule\":\"var wrapu = (u) => {\\n    if (config.mode == \\\"本地转码\\\") {\\n        return 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage'\\n    }\\n    if (config.mode == \\\"Joe版阿里云盘\\\") {\\n        return 'hiker://page/share?page=fypage&rule=阿里云盘&share_url=' + u;\\n    }\\n    if (config.mode == \\\"云盘汇影\\\") {\\n        return 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage';\\n    }\\n    if (/aliyundrive/.test(u)) {\\n        const [link, _share_pwd] = u.split('?share_pwd=');\\n        const [_link, _folderID] = link.split('/folder/');\\n        let share_pwd = (_share_pwd || '').split('#name=')[0] || '';\\n        let shareId = _link.split('com/s/')[1];\\n        return 'smartdrive://share/browse?shareId=' + shareId + '&sharePwd=' + share_pwd;\\n    }\\n    return \\\"web://\\\" + u;\\n};\\n\\nvar checkali = (realurl) => {\\n    try {\\n        let shareId = realurl.split(\\\"com/s/\\\")[1].substring(0, 11);\\n        if (realurl.includes(\\\"com/s/\\\") && realurl != \\\"\\\") {\\n            let share = fetch(\\\"https://api.aliyundrive.com/adrive/v3/share_link/get_share_by_anonymous\\\", {\\n                headers: {\\n                    'content-type': 'application/json',\\n                    \\\"User-Agent\\\": PC_UA,\\n                    \\\"Referer\\\": \\\"https://www.aliyundrive.com/\\\"\\n                },\\n                body: {\\n                    \\\"share_id\\\": shareId\\n                },\\n                method: 'POST'\\n            });\\n            if (share.includes(\\\"share_link is\\\") || share.includes(\\\"share_link cannot\\\")) return false;\\n        }\\n    } catch (e) {}\\n    return true;\\n}\\n\\nlet rules = [{\\n        name: \\\"云盘资源\\\",\\n        page: true,\\n        find: function(s, page) {\\n            let url = \\\"https://res.yunpan.win/?PageIndex=\\\" + page + \\\"&PageSize=12&Keyword=\\\" + s + \\\"&Type=&Tag=\\\";\\n            let html = request(url, {\\n                headers: {\\n                    \\\"Referer\\\": \\\"https://res.yunpan.win/\\\"\\n                }\\n            });\\n\\n            let arr = pdfa(html, \\\"main&&.card\\\");\\n            //log(arr);\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let u = pdfh(it, \\\".card-link,1&&onclick\\\").match(/https:\\\\/\\\\/(www\\\\.aliyundrive\\\\.com\\\\/s|alywp\\\\.net)\\\\/\\\\w*/g) || [];\\n                u = u.length > 0 ? u[0] : url;\\n                d.push({\\n                    title: pdfh(it, \\\".card-title&&Text\\\"),\\n                    pic_url: pd(it, \\\"img&&src\\\", url),\\n                    //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                    //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                    url: wrapu(u),\\n                    desc: \\\"““””<font color=#f13b66a>云盘资源</font>&nbsp;\\\" + (pdfh(it, \\\".card-text,-1&&Text\\\")) + \\\"\\\\n\\\" + (u),\\n                });\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"UP云搜\\\",\\n        page: true,\\n        find: function(s, page) {\\n            let url = \\\"https://api.upyunso2.com/search?keyword=\\\" + s + \\\"&page=\\\" + page + \\\"&s_type=1\\\";\\n            let html = request(url, {\\n                headers: {\\n                    \\\"Referer\\\": \\\"https://www.upyunso.com\\\",\\n                    \\\"Cookie\\\": \\\"code=1919\\\"\\n                }\\n            });\\n            //log(base64Decode(html));\\n            let arr = JSON.parse(base64Decode(html)).result.items;\\n            //log(arr);\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let u = it.page_url;\\n                //u = u.length > 0 ? u[0] : url;\\n                if (!u.includes(\\\"aliyundrive\\\")) {\\n                    continue;\\n                }\\n                d.push({\\n                    title: it.title,\\n                    //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                    //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                    url: wrapu(u),\\n                    desc: \\\"““””<font color=#f13b66a>UP云搜</font>&nbsp;\\\" + \\\"\\\\n\\\" + (u),\\n                });\\n\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"猫狸盘搜\\\",\\n        page: false,\\n        find: function(s, page) {\\n            let html = request(\\\"https://www.alipansou.com/search?k=\\\" + s, {\\n                headers: {\\n                    \\\"Referer\\\": \\\"https://www.alipansou.com/search?k=\\\" + s\\n                }\\n            });\\n            let arr = pdfa(html, \\\"#app&&a\\\");\\n            //log(arr);\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = \\\"<div>\\\" + arr[i] + \\\"</div>\\\";\\n                let u = pdfh(it, \\\"a&&href\\\");\\n                //log(u);\\n                if (!u.includes(\\\"/s/\\\")) {\\n                    continue;\\n                }\\n                u = \\\"https://www.alipansou.com\\\" + u.replace(\\\"/s/\\\", \\\"/cv/\\\");\\n                d.push({\\n                    title: pdfh(it, \\\"template&&Text\\\"),\\n                    url: $(u).lazyRule((wrapu) => {\\n                        let html = request(input, {\\n                            headers: {\\n                                \\\"Cookie\\\": \\\"no_show_donate=1\\\",\\n                                \\\"Referer\\\": input.replace(\\\"/cv/\\\", \\\"/s/\\\")\\n                            },\\n                            redirect: false\\n                        });\\n                        html = parseDomForHtml(html, 'a&&href');\\n                        //var _links = html.match(/https:\\\\/\\\\/(www\\\\.aliyundrive\\\\.com\\\\/s|alywp\\\\.net)\\\\/\\\\w*/g) || [];\\n                        //log(_links);\\n                        if (html.length > 0) {\\n                            //return 'hiker://page/detail?rule=云盘汇影&url=' + _links[0] + '??fypage';\\n                            //return 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(html) + '???fypage';\\n                            return wrapu(html);\\n                        } else {\\n                            return input;\\n                        }\\n                    }, wrapu),\\n                    desc: \\\"““””<font color=#f13b66a>猫狸盘搜</font>&nbsp;\\\" + pdfh(it, \\\"template,1&&Text\\\"),\\n                });\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"易搜\\\",\\n        page: true,\\n        find: function(s, page) {\\n            eval(getCryptoJS());\\n\\n            function keyen(str) {\\n                var key = CryptoJS.enc.Utf8.parse(\\\"4OToScUFOaeVTrHE\\\"),\\n                    iv = CryptoJS.enc.Utf8.parse(\\\"9CLGao1vHKqm17Oz\\\");\\n                var encrypted = CryptoJS.AES.decrypt({\\n                    ciphertext: CryptoJS.enc.Base64.parse(str)\\n                }, key, {\\n                    iv: iv,\\n                    mode: CryptoJS.mode.CBC,\\n                    padding: CryptoJS.pad.Pkcs7\\n                }).toString(CryptoJS.enc.Utf8);\\n                return encrypted;\\n            }\\n            let html = request(\\\"https://yiso.fun/api/search?name=\\\" + s + \\\"&pageNo=\\\" + page, {\\n                headers: {\\n                    \\\"Referer\\\": \\\"https://yiso.fun/info?searchKey=\\\" + s,\\n                    \\\"Cookie\\\": getItem('yisoucooke', '')\\n                }\\n            });\\n            //log(html);\\n            if (html.includes('登录用户无限制')) {\\n                var i = 0;\\n                do {\\n                    var tyimglin = 'https://yiso.fun/api/user/login/captcha?t=' + parseInt(new Date().getTime()) + '';\\n                    let img = convertBase64Image(tyimglin).split(',')[1];\\n                    let cod = request('https://api.nn.ci/ocr/b64/text', {\\n                        headers: {\\n                            'Content-Type': 'text/plain'\\n                        },\\n                        body: img,\\n                        method: 'POST'\\n                    });\\n                    var ver = JSON.parse(request('https://yiso.fun/api/user/login', {\\n                        headers: {\\n                            'content-type': 'application/json',\\n                            'referer': 'https://yiso.fun/login',\\n                            'Cookie': getCookie(tyimglin)\\n                        },\\n                        body: {\\n                            \\\"userName\\\": \\\"tvbox2023\\\",\\n                            \\\"password\\\": \\\"Tvbox2023\\\",\\n                            \\\"code\\\": cod\\n                        },\\n                        method: 'POST'\\n                    }));\\n                    if (ver.code == 200) {\\n                        log('易搜登入验证成功');\\n                        setItem('yisoucooke', getCookie('https://yiso.fun'));\\n                        html = request(\\\"https://yiso.fun/api/search?name=\\\" + s + \\\"&pageNo=\\\" + page, {\\n                            headers: {\\n                                \\\"Referer\\\": \\\"https://yiso.fun/info?searchKey=\\\" + s,\\n                                \\\"Cookie\\\": getItem('yisoucooke', '')\\n                            }\\n                        });\\n                        break;\\n                    }\\n                    i++;\\n                } while (i < 4);\\n\\n            }\\n            let arr = JSON.parse(html).data.list;\\n            //log(arr);\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let u = keyen(it.url);\\n                //log(u);\\n                if (u == null || !u.includes(\\\"aliyun\\\")) {\\n                    continue;\\n                }\\n                d.push({\\n                    title: \\\"““””\\\" + it.name,\\n                    //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                    //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                    url: wrapu(u),\\n                    desc: \\\"““””<font color=#f13b66a>易搜</font>&nbsp;\\\" + (it.gmtShare || it.gmtCreate) + \\\"\\\\n\\\" + (u),\\n                });\\n\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"找资源\\\",\\n        page: true,\\n        find: function(s, page) {\\n            function gethtml() {\\n                let html = request(\\\"https://zhaoziyuan.la/so?filename=\\\" + s + \\\"&page=\\\" + page, {\\n                    headers: {\\n                        \\\"Referer\\\": \\\"https://zhaoziyuan.la/stop.html\\\",\\n                        \\\"origin\\\": \\\"https://zhaoziyuan.la\\\",\\n                        \\\"Cookie\\\": getItem(\\\"zzycooke\\\", \\\"\\\"),\\n                        \\\"upgrade-insecure-requests\\\": \\\"1\\\",\\n                        \\\"content-type\\\": \\\"application/x-www-form-urlencoded\\\"\\n                    }\\n                });\\n                return html;\\n            };\\n            var html = gethtml();\\n            if (!html.includes(\\\"search_box\\\")) {\\n                let user = 'dXNlcm5hbWU9eXBqMjAyMyZwYXNzd29yZD15cGoyMDIz';\\n                let cook = JSON.parse(fetchCookie('https://zhaoziyuan.la/logiu.html', {\\n                    headers: {\\n                        'User-Agent': MOBILE_UA,\\n                        'Content-Type': 'application/x-www-form-urlencoded',\\n                        'Origin': 'https://zhaoziyuan.la',\\n                        'Referer': 'https://zhaoziyuan.la/login.html',\\n                        \\\"upgrade-insecure-requests\\\": \\\"1\\\"\\n                    },\\n                    body: base64Decode(user),\\n                    method: 'POST',\\n                    onlyHeaders: true,\\n                    withHeaders: true\\n                })).join(';');\\n                setItem(\\\"zzycooke\\\", cook);\\n                log(\\\"找资源登入\\\");\\n                html = gethtml();\\n            }\\n\\n            let arr = pdfa(html, \\\"body&&.newsList&&li:not(:first-child)\\\");\\n            //log(arr);\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let u = pdfh(it, \\\"a&&href\\\");\\n                if (u == null) {\\n                    continue;\\n                }\\n                u = \\\"https://zhaoziyuan.la/\\\" + u;\\n                //log(u);\\n                let title = pdfh(it, \\\".news_text&&h3&&Text\\\");\\n                d.push({\\n                    title: title,\\n                    desc: \\\"““””<font color=#f13b66a>找资源</font>&nbsp;\\\" + (pdfh(it, \\\".news_text&&p&&Text\\\")),\\n                    url: $(u).lazyRule((wrapu) => {\\n                        let html = request(input);\\n                        var _links = html.match(/https:\\\\/\\\\/(www\\\\.aliyundrive\\\\.com\\\\/s|alywp\\\\.net)\\\\/\\\\w*/g) || [];\\n                        //log(_links);\\n                        if (_links.length > 0) {\\n                            //return 'hiker://page/detail?rule=云盘汇影&url=' + _links[0] + '??fypage';\\n                            //return 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(_links[0]) + '???fypage';\\n                            return wrapu(_links[0]);\\n                        } else {\\n                            return input;\\n                        }\\n                    }, wrapu)\\n                });\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"小纸条\\\",\\n        page: false,\\n        find: function(s, page) {\\n            function gettoken() {\\n                if (getMyVar('xzytoken', '').length == 0) {\\n                    let token = JSON.parse(post('https://gitcafe.net/tool/alipaper/', {\\n                        headers: {\\n                            'Referer': 'https://u.gitcafe.net/'\\n                        },\\n                        body: {\\n                            action: 'get_token'\\n                        }\\n                    })).data;\\n                    putMyVar('xzttoken', token);\\n                }\\n                return getMyVar('xzttoken', '');\\n            }\\n\\n            function cat_code(a) {\\n                var d, e, b = [\\\"华语电视\\\", \\\"日韩电视\\\", \\\"欧美电视\\\", \\\"其他电视\\\", \\\"华语电影\\\", \\\"日韩电影\\\", \\\"欧美电影\\\", \\\"其他电影\\\", \\\"华语动漫\\\", \\\"日韩动漫\\\", \\\"欧美动漫\\\", \\\"纪录片\\\", \\\"综艺片\\\", \\\"教育培训\\\", \\\"其他视频\\\", \\\"华语音乐\\\", \\\"日韩音乐\\\", \\\"欧美音乐\\\", \\\"其他音乐\\\", \\\"娱乐软件\\\", \\\"系统软件\\\", \\\"网络软件\\\", \\\"办公软件\\\", \\\"其他软件\\\", \\\"漫画\\\", \\\"小说\\\", \\\"出版书\\\", \\\"知识培训\\\", \\\"其他文档\\\", \\\"壁纸\\\", \\\"人物\\\", \\\"风景\\\", \\\"其他图片\\\", \\\"其他\\\"],\\n                    c = [\\\"hyds\\\", \\\"rhds\\\", \\\"omds\\\", \\\"qtds\\\", \\\"hydy\\\", \\\"rhdy\\\", \\\"omdy\\\", \\\"qtdy\\\", \\\"hydm\\\", \\\"rhdm\\\", \\\"omdm\\\", \\\"jlp\\\", \\\"zyp\\\", \\\"jypx\\\", \\\"qtsp\\\", \\\"hyyy\\\", \\\"rhyy\\\", \\\"omyy\\\", \\\"qtyy\\\", \\\"kfrj\\\", \\\"xtrj\\\", \\\"wlrj\\\", \\\"bgrj\\\", \\\"qtrj\\\", \\\"mh\\\", \\\"xs\\\", \\\"cbs\\\", \\\"zspx\\\", \\\"qtwd\\\", \\\"bz\\\", \\\"rw\\\", \\\"fj\\\", \\\"qttp\\\", \\\"qt\\\"];\\n                for (d = 0, e = c.length; e > d; d++)\\n                    if (c[d] == a) return b[d];\\n            }\\n            let d = [];\\n            let html = post(\\\"https://gitcafe.net/tool/alipaper/\\\", {\\n                headers: {\\n                    'Referer': 'https://u.gitcafe.net/'\\n                },\\n                body: {\\n                    action: \\\"search\\\",\\n                    from: \\\"web\\\",\\n                    token: gettoken(),\\n                    keyword: s\\n                }\\n            })\\n            let list = JSON.parse(html);\\n            if (list.data) {\\n                list = list.data;\\n            }\\n            for (let i = 0; i < list.length; i++) {\\n                let it = list[i]\\n                let title = it.title;\\n                let murl = 'https://www.aliyundrive.com/s/' + it.key\\n                if (!checkali(murl)) {\\n                    continue;\\n                }\\n                if (title.includes(s)) {\\n                    d.push({\\n                        title: \\\"√ \\\" + title,\\n                        desc: \\\"““””<font color=#f13b66a>小纸条</font>&nbsp;\\\" + cat_code(it.cat),\\n                        extra: {\\n                            des: it.des\\n                        },\\n                        //url: 'hiker://page/detail?rule=云盘汇影&url=https://www.aliyundrive.com/s/' + murl + '??fypage',\\n                        url: wrapu(murl)\\n                        //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent('https://www.aliyundrive.com/s/' + murl) + '???fypage',\\n                    });\\n\\n                }\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"玩偶哥哥\\\",\\n        page: true,\\n        find: function(s, page) {\\n            let url = \\\"http://wogg.xyz/index.php/vodsearch/\\\" + s + \\\"----------\\\" + page + \\\"---.html\\\";\\n            let html = request(url, {});\\n            let arr = parseDomForArray(html, '.module-items&&.module-search-item');\\n            //log(arr);\\n            let d = [];\\n            let bet = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let utitle = parseDomForHtml(it, 'h3&&a&&Text');\\n                let userial = parseDomForHtml(it, '.video-serial&&Text');\\n                let uimage = parseDom(it, '.lazyload&&data-src', 'http://wogg.xyz/');\\n                let u = parseDom(it, 'h3&&a&&href', 'http://wogg.xyz/');\\n                //let det = request(u, {});\\n                bet.push({\\n                    title: utitle,\\n                    url: u,\\n                    image: uimage,\\n                    desc: userial\\n                });\\n            }\\n            if (bet.length > 0) {\\n                let beth = batchFetch(bet);\\n                for (let i = 0; i < beth.length; i++) {\\n                    let list = parseDomForArray(beth[i], '.module-player-list&&p')\\n                    for (let j = 0; j < list.length; j++) {\\n                        let u = parseDomForHtml(list[j], 'p&&Text');\\n                        if (!u.includes(\\\"/s/\\\")) {\\n                            continue;\\n                        }\\n                        d.push({\\n                            title: bet[i].title,\\n                            pic_url: bet[i].image,\\n                            //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                            //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                            url: wrapu(u),\\n                            desc: \\\"““””<font color=#f13b66a>玩偶哥哥</font>&nbsp;\\\" + (bet[i].desc) + '\\\\n' + u,\\n                        });\\n\\n                    }\\n                }\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"阿里云盘网\\\",\\n        page: true,\\n        find: function(s, page) {\\n            let url = \\\"https://www.alypw.cn/search.php?q=\\\" + s + \\\"&page=\\\" + page;\\n            let html = request(url, {});\\n            let arr = parseDomForArray(html, '.list&&li');\\n            //log(arr);\\n            let d = [];\\n            let bet = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let utitle = parseDomForHtml(it, 'a&&title');\\n                let userial = parseDomForHtml(it, '.fa-clock-o&&Text');\\n                let uimage = parseDom(it, 'img&&src', 'https://www.alypw.cn/');\\n                let u = parseDom(it, 'a&&href', 'https://www.alypw.cn/');\\n                //let det = request(u, {});\\n                if (!utitle.includes(s)) {\\n                    continue;\\n                }\\n                bet.push({\\n                    title: utitle,\\n                    url: u,\\n                    image: uimage,\\n                    desc: userial\\n                });\\n            }\\n            //log(bet);\\n            if (bet.length > 0) {\\n                let beth = batchFetch(bet);\\n                for (let i = 0; i < beth.length; i++) {\\n                    let list = parseDomForArray(beth[i], 'body&&a[href^=https://www.aliyundrive.com/s/]')\\n                    //log(list);\\n                    for (let j = 0; j < list.length; j++) {\\n                        let u = parseDomForHtml(list[j], 'a&&href');\\n                        d.push({\\n                            title: bet[i].title,\\n                            pic_url: bet[i].image,\\n                            //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                            //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                            url: wrapu(u),\\n                            desc: \\\"““””<font color=#f13b66a>阿里云盘网</font>&nbsp;\\\" + (bet[i].desc) + '\\\\n' + u,\\n                        });\\n\\n                    }\\n                }\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"土拨鼠\\\",\\n        page: false,\\n        find: function(s, page) {\\n            let html = fetch('https://www.tbsdy.com/search.html?keyword=' + s + '&category=983920&data_type=987910', {\\n                headers: {\\n                    'User-Agent': PC_UA\\n                }\\n            });\\n\\n            let arr = parseDomForArray(html, '.search_result_netdisk_list&&a');\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                //log(it);\\n                let u = parseDomForHtml(it, 'a&&href');\\n                let tit = parseDomForHtml(it, '.netdisk_item_detail_name&&Text');\\n                if (!tit.includes(s)) {\\n                    continue;\\n                }\\n                //log(u);\\n                d.push({\\n                    title: tit,\\n                    //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                    //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                    url: wrapu(u),\\n                    desc: \\\"““””<font color=#f13b66a>土拨鼠搜</font>&nbsp;\\\" + \\\"\\\\n\\\" + u,\\n                });\\n            }\\n            return d;\\n        }\\n    }, {\\n        name: \\\"阿里搜\\\",\\n        page: true,\\n        find: function(s, page) {\\n            let d = [];\\n            let html = request('https://aliso.cc/s/' + s + '-' + page + '-0.html', {});\\n\\n            let list = parseDomForArray(html, '.search-result&&.resource-item');\\n            for (let j = 0; j < list.length; j++) {\\n                let u = list[j];\\n                let tit = parseDomForHtml(u, 'h3&&Text');\\n                if (!tit.includes(s)) {\\n                    continue;\\n                }\\n                d.push({\\n                    title: tit,\\n                    url: $(parseDom(u, 'h3&&a&&href', 'https://aliso.cc/')).lazyRule((wrapu) => {\\n                        eval(getCryptoJS());\\n\\n                        function decry(str) {\\n                            var key = CryptoJS.enc.Utf8.parse(\\\"9EB20DDFD6AFBD68\\\");\\n                            var encrypted = CryptoJS.AES.decrypt(str, key, {\\n                                iv: key,\\n                                mode: CryptoJS.mode.CBC,\\n                                padding: CryptoJS.pad.Pkcs7\\n                            }).toString(CryptoJS.enc.Utf8);\\n                            return encrypted;\\n                        }\\n\\n                        let html = request(input);\\n                        let but = parseDom(html, '.button&&href', 'https://aliso.cc/');\\n                        //log(but);\\n                        let got = request(but);\\n                        //log(got);\\n                        eval(parseDomForHtml(got, 'head&&script,1&&Html'));\\n                        return wrapu(decry(base64.split('!')[0]));\\n\\n                    }, wrapu),\\n                    desc: \\\"““””<font color=#f13b66a>阿里搜</font>&nbsp;\\\" + parseDomForHtml(u, '.time&&Text'),\\n                });\\n\\n            }\\n            return d;\\n        }\\n    }, /*{\\n        name: \\\"土狗搜\\\",\\n        page: false,\\n        find: function(s, page) {\\n            let html = request('https://www.tugousou.com/search', {\\n                body: 'keyword=' + s,\\n                method: 'POST'\\n            });\\n\\n            let arr = parseDomForArray(html, '.layui-container,1&&.layui-row:has(a)');\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let u = parseDomForHtml(it, 'a&&href');\\n                if (!u.includes(\\\"/s/\\\")) {\\n                    continue;\\n                }\\n                //log(u);\\n                d.push({\\n                    title: parseDomForHtml(it, 'a&&Text'),\\n                    //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                    //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                    url: wrapu(u),\\n                    desc: \\\"““””<font color=#f13b66a>土狗搜</font>&nbsp;\\\" + parseDomForHtml(it, 'p,-1&&Text') + \\\"\\\\n\\\" + u,\\n                });\\n            }\\n            return d;\\n        }\\n    }, */{\\n        name: \\\"云盘分享社\\\",\\n        page: false,\\n        find: function(s, page) {\\n            eval(getCryptoJS());\\n\\n            function decry(str) {\\n                var key = CryptoJS.enc.Utf8.parse(\\\"5F6B2AK33DASD123\\\");\\n                var encrypted = CryptoJS.AES.decrypt(str, key, {\\n                    mode: CryptoJS.mode.ECB,\\n                    padding: CryptoJS.pad.Pkcs7\\n                }).toString(CryptoJS.enc.Utf8);\\n                return encrypted;\\n            }\\n            let html = request('https://www.yunpanfenxiang.cn/api/bbs/api/getdata?key=' + s + '&type=video', {\\n                headers: {\\n                    \\\"Referer\\\": \\\"https://www.yunpanfenxiang.cn/\\\"\\n                }\\n            });\\n            let json = decry(JSON.parse(html).data);\\n            //log(json);\\n            let arr = JSON.parse(json); //[0].result.items;\\n            //log(arr);\\n\\n            let d = [];\\n            let bet = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let url = it.pid;\\n                bet.push({\\n                    url: 'https://www.yunpanfenxiang.cn/api/bbs/api/getarticle?id=' + url,\\n                    options: {\\n                        headers: {\\n                            \\\"Referer\\\": \\\"https://www.yunpanfenxiang.cn/\\\"\\n                        }\\n                    }\\n                });\\n            }\\n            //log(u);\\n            let beth = batchFetch(bet);\\n\\n            //log(article);\\n            for (let i = 0; i < beth.length; i++) {\\n                let json = JSON.parse(beth[i]).data;\\n                //log(json);\\n                let list = json.download.split('@');\\n                for (let j = 0; j < list.length; j++) {\\n                    let u = list[j];\\n                    d.push({\\n                        title: json.title,\\n                        //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                        //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                        url: wrapu('https://www.aliyundrive.com/s/' + u),\\n                        desc: \\\"““””<font color=#f13b66a>云盘分享社</font>&nbsp;\\\" + (json.createtime) + \\\"\\\\n\\\" + ('https://www.aliyundrive.com/s/' + u),\\n                    });\\n                }\\n            }\\n\\n            return d;\\n        }\\n    }, {\\n        name: \\\"盘搜\\\",\\n        page: true,\\n        find: function(s, page) {\\n            page = (page - 1) * 10;\\n            let url = \\\"https://www.pansearch.me/search?keyword=\\\" + s + \\\"&offset=\\\" + page + \\\"&pan=aliyundrive\\\";\\n            let html = request(url, {});\\n\\n            let arr = parseDomForArray(html, '.grid&&.shadow:has(a[href^=https://www.aliyundrive.com/s/])');\\n            //log(arr);\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let u = parseDomForHtml(it, 'a[href^=https://www.aliyundrive.com/s/]&&href');\\n                //log(u);\\n                d.push({\\n                    title: parseDomForHtml(it, '.break-all&&Text').split('http')[0],\\n                    pic_url: parseDomForHtml(it, 'img&&src'),\\n                    //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                    //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                    url: wrapu(u),\\n                    desc: \\\"““””<font color=#f13b66a>盘搜</font>&nbsp;\\\" + (parseDomForHtml(it, 'p&&Text')) + \\\"\\\\n\\\" + (u),\\n                });\\n\\n            }\\n            return d;\\n        }\\n    },\\n    {\\n        name: \\\"DOVX搜\\\",\\n        page: false,\\n        find: function(s, page) {\\n            let url = \\\"https://api.dovx.tk/ali/search?wd=\\\" + s;\\n            let html = request(url, {});\\n            //log(base64Decode(html));\\n            let arr = JSON.parse(html).list;\\n            //log(arr);\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let u = it.vod_content;\\n                //u = u.length > 0 ? u[0] : url;\\n                if (!u.includes(\\\"aliyundrive\\\")) {\\n                    continue;\\n                }\\n                if (!checkali(u)) {\\n                    continue;\\n                }\\n                d.push({\\n                    title: \\\"√ \\\" + it.vod_name,\\n                    pic_url: it.vod_pic,\\n                    //url: 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage',\\n                    //url: 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage',\\n                    url: wrapu(u),\\n                    desc: \\\"““””<font color=#f13b66a>DOVX搜</font>&nbsp;\\\" + \\\"\\\\n\\\" + (u),\\n                });\\n            }\\n            return d;\\n        }\\n    },\\n    {\\n        name: \\\"必应\\\",\\n        page: true,\\n        find: function(s, page) {\\n            let url = \\\"https://cn.bing.com/search?q=\\\" + s + \\\"+aliyundrive&qs=ds&form=QBRE\\\";\\n            if (page != 1) {\\n                url = getMyVar(\\\"bing\\\", url);\\n            }\\n            let html = request(url, {\\n                headers: {\\n                    \\\"Referer\\\": \\\"https://cn.bing.com/\\\",\\n                    //\\\"X-Requested-With\\\": \\\"com.example.hikerview\\\",\\n                    \\\"Accept\\\": \\\"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\\\"\\n                }\\n            });\\n            let arr = pdfa(html, \\\"body&&a\\\");\\n            //log(arr);\\n            let d = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                let it = arr[i];\\n                let u = pd(it, \\\"a&&href\\\", url);\\n                let t = pdfh(it, \\\"a&&Text\\\");\\n                if (it.includes(\\\"Next page\\\") || it.includes(\\\"下一页\\\")) {\\n                    let u2 = pd(it, \\\"a&&href\\\", url);\\n                    //log(\\\"next page\\\");\\n                    //log(u2);\\n                    putMyVar(\\\"bing\\\", u2);\\n                }\\n                if (u == null || t == null || !it.includes(s)) {\\n                    continue;\\n                }\\n                if (!it.includes(\\\"网盘\\\") && !it.includes(\\\"云盘\\\") &&\\n                    !it.includes(\\\"aliyundrive\\\") && !it.includes(\\\"yunpan\\\")) {\\n                    continue;\\n                }\\n                if (u.startsWith(\\\"https://cn.bing.com/\\\")) {\\n                    continue;\\n                }\\n                let dom = getHome(u).replace(\\\"http://\\\", \\\"\\\").replace(\\\"https://\\\", \\\"\\\");\\n                let _links = t.match(/https:\\\\/\\\\/(www\\\\.aliyundrive\\\\.com\\\\/s|alywp\\\\.net)\\\\/\\\\w*/g) || [];\\n                //log(_links);\\n                let c = null;\\n                //log(_links);\\n                //if (_links.length > 0) {\\n                //c = 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(_links[0]) + '???fypage';\\n                //c=wrapu(_links[0])\\n                //}\\n                if (_links.length > 1 && _links[1].replace(_links[0], \\\"\\\").replace(/[a-zA-Z0-9]+/g, \\\"\\\") == \\\"\\\") {\\n                    c = wrapu(_links[1]);\\n                } else if (_links.length > 0) {\\n                    c = wrapu(_links[0]);\\n                }\\n                d.push({\\n                    title: t,\\n                    desc: \\\"““””<font color=#f13b66a>必应</font>&nbsp;\\\" + dom,\\n                    url: c != null ? c : $(u).lazyRule((wrapu, mode) => {\\n                        let html = request(input);\\n                        var _links = html.match(/https:\\\\/\\\\/(www\\\\.aliyundrive\\\\.com\\\\/s|alywp\\\\.net)\\\\/\\\\w*/g) || [];\\n                        //log(_links);\\n                        //if (_links.length > 0) {\\n                        //return 'hiker://page/detail?rule=云盘汇影&url=' + _links[0] + '??fypage';\\n                        //return 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(_links[0]) + '???fypage';\\n                        if (_links.length > 1 && _links[1].replace(_links[0], \\\"\\\").replace(/[a-zA-Z0-9]+/g, \\\"\\\") == \\\"\\\") {\\n                            return wrapu(_links[1]);\\n                        } else if (_links.length > 0) {\\n                            return wrapu(_links[0]);\\n                        } else {\\n                            let rule = MY_RULE.title;\\n                            return \\\"hiker://page/ysfx?rule=\\\" + rule + \\\"&r=\\\" + rule + \\\"&mode=\\\" + mode + \\\"##\\\" + input;\\n                        }\\n                    }, wrapu, config.mode)\\n                });\\n            }\\n            return d;\\n        }\\n    }\\n];\\n\\n\\n//并发规则数\\nlet ccof = $.require('hiker://page/ccof')\\nrules.push(ccof)\\n//并发规则数\\nlet size = 10;\\n\\n$.exports = function(page, rule) {\\n    if (!page && !rule) {\\n        return rules.map(it => it.name);\\n    }\\n    if (rule != null) {\\n        if (page != null && page > 1) {\\n            return rules.filter(i => i.name == rule && i.page);\\n        }\\n        return rules.filter(i => i.name == rule);\\n    }\\n    let start = (page - 1) * size;\\n    if (rules.length < start + 1) {\\n        return [];\\n    }\\n    let len = size;\\n    if (rules.length < page * size) {\\n        len = rules.length - start\\n    }\\n    return rules.slice(start, start + len);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"搜索\",\"path\":\"sou\",\"rule\":\"let r = getItem(\\\"r\\\", \\\"\\\");\\nif (MY_PAGE == 1) {\\n    let r1 = fetch(\\\"hiker://home@云盘汇影\\\");\\n    if (!r1 || r1.length <= 5) {\\n        let ru = $.toString(() => {\\n            return \\\"海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@云盘汇影@eyJsYXN0X2NoYXB0ZXJfcnVsZSI6IiIsInRpdGxlIjoi5LqR55uY5rGH5b2xIiwiYXV0aG9yIjoiTXJGbHkiLCJ1cmwiOiJoaWtlcjovL2VtcHR5JCQkZnlwYWdlIiwidmVyc2lvbiI6NiwiY29sX3R5cGUiOiJ0ZXh0XzEiLCJjbGFzc19uYW1lIjoiIiwidHlwZSI6ImFsbCIsImNsYXNzX3VybCI6IiIsImFyZWFfbmFtZSI6IiIsImFyZWFfdXJsIjoiIiwic29ydF9uYW1lIjoiIiwieWVhcl9uYW1lIjoiIiwic29ydF91cmwiOiIiLCJ5ZWFyX3VybCI6IiIsImZpbmRfcnVsZSI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLmhvbWVQYWdlKCk7Iiwic2VhcmNoX3VybCI6Imhpa2VyOi8vZW1wdHkkJCQqKiQkJGZ5cGFnZSQkJCIsImdyb3VwIjoi4pGg572R55uYIiwic2VhcmNoRmluZCI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLnNlYXJjaFBhZ2UodHJ1ZSk7XG4iLCJkZXRhaWxfY29sX3R5cGUiOiJtb3ZpZV8xIiwiZGV0YWlsX2ZpbmRfcnVsZSI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLmRldGFpbFBhZ2UoKTsiLCJzZGV0YWlsX2NvbF90eXBlIjoibW92aWVfMSIsInNkZXRhaWxfZmluZF9ydWxlIjoiIiwidWEiOiJtb2JpbGUiLCJwcmVSdWxlIjoidmFyIGFsaWpzID0gZmV0Y2hDYWNoZSgnaHR0cHM6Ly9naXRlZS5jb20vZmx5MTM5Ny9oaWtlci1pY3kvcmF3L21hc3Rlci9hbGkuanMnKTtcbi8vdmFyIGFsaWpzID0gbnVsbDtcbmlmICghYWxpanMgfHwgIWFsaWpzLmluY2x1ZGVzKCdhbGkuJykpIHtcbiAgICBhbGlqcyA9IGZldGNoQ2FjaGUoJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9mbHkxMzk3L2hpa2VyLWljeS9hbGkuanMnKVxufVxuaWYgKCFhbGlqcyB8fCAhYWxpanMuaW5jbHVkZXMoJ2FsaS4nKSkge1xuICAgIGFsaWpzID0gZmV0Y2hDYWNoZSgnaHR0cDovL2xmaWN5LmNvbTozMDAwMC9tcmZseS9oaWtlci1pY3kvcmF3L21hc3Rlci9hbGkuanMnKVxufVxuaWYgKGFsaWpzKSB7XG4gICAgd3JpdGVGaWxlKFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzXCIsIGFsaWpzKTtcbiAgICBldmFsKGFsaWpzKTtcbiAgICBhbGkucHJlUnVsZSgpO1xufSIsInBhZ2VzIjoiW3tcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLnvZHnm5jor6bmg4VcIixcInBhdGhcIjpcImRldGFpbFwiLFwicnVsZVwiOlwianM6XFxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xcbmFsaS5pbml0Q29uZmlnKCk7XFxuYWxpLmFsaVJ1bGUoKTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzFfbGVmdF9waWNcIixcIm5hbWVcIjpcIui1hOa6kOe9kemhteivpuaDhVwiLFwicGF0aFwiOlwic2l0ZS1kZXRhaWxcIixcInJ1bGVcIjpcImpzOlxcbmV2YWwoZmV0Y2goJ2hpa2VyOi8vZmlsZXMvcnVsZXMvaWN5L2FsaS5qcycpKTtcXG5hbGkuZGV0YWlsUGFnZSgpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5Liq5Lq6572R55uY6K+m5oOFXCIsXCJwYXRoXCI6XCJkcml2ZVwiLFwicnVsZVwiOlwianM6XFxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xcbmFsaS5pbml0Q29uZmlnKCk7XFxuYWxpLm15QWxpUnVsZSgpO1wifV0iLCJpY29uIjoiaHR0cHM6Ly9naXRlZS5jb20vZmx5MTM5Ny9oaWtlci1pY3kvcmF3L21hc3Rlci9hbGl5dW4ucG5nIiwicHJveHkiOiIifQ==\\\"\\n        });\\n        confirm({\\n            title: MY_RULE.title + '提示',\\n            content: '本规则依赖云盘汇影规则，点击下面的确定按钮导入，注意导入后一定要在云盘汇影登录阿里云盘账号，否则不能用',\\n            confirm: ru,\\n            cancel: ru\\n        })\\n    }\\n    addListener(\\\"onClose\\\", $.toString(() => {\\n        clearMyVar(\\\"s\\\");\\n    }));\\n    let tip = \\\"云盘搜索君 检索功能由对应网站提供，本规则不提供任何内容\\\";\\n    d.push({\\n        title: tip,\\n        url: $(\\\"#noLoading#\\\").lazyRule((tip) => {\\n            confirm({\\n                title: \\\"使用说明\\\",\\n                content: tip + \\\"，本规则代码完全开源，仅供学习和研究；点击下方确定按钮跳转云盘汇影小程序\\\",\\n                confirm: \\\"'hiker://home@云盘汇影'\\\"\\n            });\\n            return \\\"hiker://empty\\\"\\n        }, tip),\\n        col_type: \\\"icon_2_round\\\",\\n        desc: \\\"\\\",\\n        pic_url: \\\"hiker://images/icon2\\\"\\n    });\\n    let dmode = getItem(\\\"dmode\\\", \\\"云盘汇影\\\");\\n    initConfig({\\n        mode: dmode\\n    });\\n\\n    d.push({\\n        title: \\\"模式：\\\" + dmode,\\n        url: \\\"select://\\\" + JSON.stringify({\\n            title: \\\"选择模式\\\",\\n            options: [\\\"云盘汇影\\\", \\\"本地转码\\\", \\\"Joe版阿里云盘\\\", \\\"官方APP\\\"],\\n            col: 1,\\n            js: $.toString(() => {\\n                setItem(\\\"dmode\\\", input);\\n                refreshPage();\\n                if (input == \\\"官方APP\\\") {\\n                    return \\\"toast://修改成功，请确保手机有安装阿里云盘官方APP\\\";\\n                } else if (input == \\\"Joe版阿里云盘\\\") {\\n                    let r1 = fetch(\\\"hiker://home@阿里云盘\\\");\\n                    if (!r1 || r1.length <= 5) {\\n                        let ru = $.toString(() => {\\n                            return \\\"海阔视界首页频道规则【阿里云盘】￥home_rule_url￥http://hiker.nokia.press/hikerule/rulelist.json?id=5656\\\"\\n                        });\\n                        confirm({\\n                            title: MY_RULE.title + '提示',\\n                            content: '本规则依赖阿里云盘规则，点击下面的确定按钮导入，注意导入后一定要登录云盘账号，否则不能用',\\n                            confirm: ru,\\n                            cancel: ru\\n                        });\\n                        return \\\"toast://请导入缺失的规则\\\";\\n                    }\\n                    return \\\"toast://修改成功，请确保有登录账号\\\";\\n                } else {\\n                    return \\\"toast://修改成功，注意要在云盘汇影设置里面登录账号\\\"\\n                }\\n            })\\n        }),\\n        col_type: \\\"icon_2_round\\\",\\n        desc: \\\"\\\",\\n        pic_url: \\\"hiker://images/icon1\\\"\\n    });\\n\\n\\n    d.push({\\n        title: '搜索',\\n        desc: '请输入关键词',\\n        col_type: 'input',\\n        url: $.toString(() => {\\n            putMyVar('s', input);\\n            refreshPage();\\n            return 'hiker://empty'\\n        }),\\n        extra: {\\n            defaultValue: getMyVar('s', '')\\n        }\\n    });\\n    let rules = $.require(\\\"hiker://page/data\\\")();\\n    d.push({\\n        title: \\\"\\\" == r ? \\\"““全部””\\\" : \\\"全部\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            clearItem(\\\"r\\\");\\n            refreshPage();\\n            return \\\"hiker://empty\\\"\\n        }),\\n        col_type: \\\"scroll_button\\\",\\n        desc: \\\"\\\",\\n        pic_url: \\\"\\\"\\n    });\\n    for (let it of rules) {\\n        d.push({\\n            title: it == r ? \\\"““\\\" + it + \\\"””\\\" : it,\\n            url: $(\\\"#noLoading#\\\").lazyRule((r) => {\\n                setItem(\\\"r\\\", r);\\n                refreshPage();\\n                return \\\"hiker://empty\\\"\\n            }, it),\\n            col_type: \\\"scroll_button\\\",\\n            desc: \\\"\\\",\\n            pic_url: \\\"\\\"\\n        });\\n    }\\n    d.push({\\n        col_type: 'line',\\n        extra: {\\n            id: 'ypj-l'\\n        }\\n    });\\n}\\nlet s = getMyVar('s', '');\\nif (s != \\\"\\\") {\\n    let p = MY_PAGE;\\n    let data = $.require(\\\"hiker://page/data\\\")(p, r != \\\"\\\" ? r : null);\\n\\n    let pageid = \\\"ypj-page\\\" + p;\\n    if (data.length > 0) {\\n        d.push({\\n            title: \\\"加载第\\\" + p + \\\"页中，进度：1/\\\" + data.length,\\n            url: \\\"\\\",\\n            col_type: \\\"text_center_1\\\",\\n            desc: \\\"\\\",\\n            pic_url: \\\"\\\",\\n            extra: {\\n                id: pageid\\n            }\\n        });\\n    }\\n    setResult(d);\\n    log(data.length);\\n    if (data.length > 0) {\\n        //多线程加载        \\n        let realPage = \\\"\\\" == r ? 1 : p;\\n        let tasks = data.map(it => {\\n            return {\\n                func: function(rule) {\\n                    return rule.find(s, realPage);\\n                },\\n                param: it,\\n                id: \\\"rule@\\\" + it.name\\n            }\\n        });\\n\\n        batchExecute(tasks, {\\n            func: function(param, id, error, result) {\\n                //log(\\\"listener: \\\" + (result || []).length)\\n                param.i = param.i + 1;\\n                if (result) {\\n                    try {\\n                        for (let it of result) {\\n                            param.j = param.j + 1;\\n                            addItemBefore(pageid, {\\n                                title: it.title.includes(\\\"““””\\\") ? it.title : \\\"““””\\\" + it.title.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\"),\\n                                desc: it.desc,\\n                                url: it.url,\\n                                pic_url: it.pic_url,\\n                                col_type: it.pic_url ? 'movie_1_vertical_pic' : \\\"text_1\\\",\\n                                extra: {\\n                                    id: \\\"__app\\\" + MY_PAGE + \\\"@\\\" + param.j,\\n                                    inheritTitle: false\\n                                }\\n                            })\\n                        }\\n                    } catch (e) {}\\n\\n                }\\n                if (param.i >= param.all) {\\n                    deleteItem(pageid)\\n                } else {\\n                    updateItem({\\n                        title: \\\"加载第\\\" + MY_PAGE + \\\"页中，进度：\\\" + (param.i + 1) + \\\"/\\\" + param.all,\\n                        url: \\\"\\\",\\n                        col_type: \\\"text_center_1\\\",\\n                        desc: \\\"\\\",\\n                        pic_url: \\\"\\\",\\n                        extra: {\\n                            id: pageid\\n                        }\\n                    })\\n                }\\n            },\\n            param: {\\n                all: data.length,\\n                i: 0,\\n                j: -1\\n            }\\n        })\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"搜索页面\",\"path\":\"soup\",\"rule\":\"js:\\nvar d = [];\\nif (MY_PARAMS.key) {\\n    putMyVar(\\\"s\\\", MY_PARAMS.key);\\n}\\neval(JSON.parse(fetch(\\\"hiker://page/sou\\\")).rule);\"},{\"col_type\":\"movie_3\",\"name\":\"CCOF\",\"path\":\"ccof\",\"rule\":\"var wrapu = (u) => {\\n    if (config.mode == \\\"本地转码\\\") {\\n        return 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(u) + '???fypage'\\n    }\\n    if (config.mode == \\\"Joe版阿里云盘\\\") {\\n        return 'hiker://page/share?page=fypage&rule=阿里云盘&share_url=' + u;\\n    }\\n    if (config.mode == \\\"云盘汇影\\\") {\\n        return 'hiker://page/detail?rule=云盘汇影&url=' + u + '??fypage';\\n    }\\n    if (/aliyundrive/.test(u)) {\\n        const [link, _share_pwd] = u.split('?share_pwd=');\\n        const [_link, _folderID] = link.split('/folder/');\\n        let share_pwd = (_share_pwd || '').split('#name=')[0] || '';\\n        let shareId = _link.split('com/s/')[1];\\n        return 'smartdrive://share/browse?shareId=' + shareId + '&sharePwd=' + share_pwd;\\n    }\\n    return \\\"web://\\\" + u;\\n};\\n$.exports = {\\n    name: 'CCOF',\\n    page: true,\\n    find: function(s, page) {\\n        let d = []\\n        const {\\n            bytesToSize,\\n            color\\n        } = $.require('hiker://page/tools');\\n        let html = fetch('https://pan.ccof.cc/api/search', {\\n            headers: {\\n                \\\"content-type\\\": 'application/json',\\n                'Referer': 'https://pan.ccof.cc/search?keyword=' + s\\n            },\\n            body: {\\n                \\\"pageSize\\\": 20,\\n                \\\"pageNum\\\": page,\\n                \\\"keyword\\\": s,\\n                \\\"fromMobile\\\": true\\n            },\\n            method: 'POST'\\n        })\\n        let list = JSON.parse(html)\\n            .data.rows\\n        for (let i = 0; i < list.length; i++) {\\n            let it = list[i]\\n            let title = it.fileName\\n            let murl = it.url\\n            let type = it.type.replace(/folder/, '文件夹').replace(/file/, '文件')\\n            if (title.includes(s)) {\\n                d.push({\\n                    title: title,\\n                    desc: '““””<font color=#f13b66a>CCOF</font>&nbsp;' + '文件类型：' + type + '，文件大小：' + bytesToSize(it.size),\\n                    url: wrapu(murl)\\n                })\\n            }\\n        }\\n        return d\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"tools\",\"rule\":\"function bytesToSize(size) {\\n    if (size < 0.1 * 1024) {\\n        //小于0.1KB，则转化成B\\n        size = size.toFixed(2) + \\\"B\\\";\\n    } else if (size < 0.1 * 1024 * 1024) {\\n        // 小于0.1MB，则转化成KB\\n        size = (size / 1024).toFixed(2) + \\\"KB\\\";\\n    } else if (size < 0.1 * 1024 * 1024 * 1024) {\\n        // 小于0.1GB，则转化成MB\\n        size = (size / (1024 * 1024)).toFixed(2) + \\\"MB\\\";\\n    } else {\\n        // 其他转化成GB\\n        size = (size / (1024 * 1024 * 1024)).toFixed(2) + \\\"GB\\\";\\n    }\\n    // 转成字符串\\n    let sizeStr = size + \\\"\\\",\\n        // 获取小数点处的索引\\n        index = sizeStr.indexOf(\\\".\\\"),\\n        // 获取小数点后两位的值\\n        dou = sizeStr.substr(index + 1, 2);\\n    // 判断后两位是否为00，如果是则删除00\\n    if (dou === \\\"00\\\") return sizeStr.substring(0, index) + sizeStr.substr(index + 3, 2);\\n    return size;\\n}\\n$.exports.bytesToSize = bytesToSize;\\n$.exports.color = function(text, color) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””<font color='\\\" + color + \\\"'>\\\" + text + \\\"</font>\\\";\\n}\\n\\n$.exports.sleep = function(timeout) {\\n    java.lang.Thread.sleep(timeout);\\n}\\n\\nfunction htmlTag(tag, text) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””\\\" + \\\"<\\\" + tag + \\\">\\\" + text + \\\"</\\\" + tag + \\\">\\\";\\n\\n}\\n$.exports.htmlTag = htmlTag;\\n$.exports.small = function(text) {\\n    return htmlTag(\\\"small\\\", text);\\n}\\n\\nfunction getTime(file,isStandard) {\\n    isStandard = isStandard||false;\\n    let tTime = file.updated_at || file.time_str || \\\"\\\";\\n    tTime = tTime.split(\\\"T\\\");\\n    let date = tTime[0];\\n    if(isStandard){\\n        date = date.replace(/-/g,\\\"/\\\");\\n    }\\n    tTime = tTime[1].split(/Z|\\\\./);\\n    date += \\\" \\\" + tTime[0];\\n    return date;\\n}\\nfunction getTimeInt(timeStr){\\n    return (new Date(timeStr)).getTime()\\n}\\n$.exports.getTime = getTime;\\n\\nlet chnNumChar = {\\n    零: 0,\\n    一: 1,\\n    二: 2,\\n    三: 3,\\n    四: 4,\\n    五: 5,\\n    六: 6,\\n    七: 7,\\n    八: 8,\\n    九: 9\\n};\\n\\nlet chnNameValue = {\\n    十: {\\n        value: 10,\\n        secUnit: false\\n    },\\n    百: {\\n        value: 100,\\n        secUnit: false\\n    },\\n    千: {\\n        value: 1000,\\n        secUnit: false\\n    },\\n    万: {\\n        value: 10000,\\n        secUnit: true\\n    },\\n    亿: {\\n        value: 100000000,\\n        secUnit: true\\n    }\\n}\\n\\nfunction ChineseToNumber(chnStr) {\\n    let rtn = 0;\\n    let section = 0;\\n    let number = 0;\\n    let secUnit = false;\\n    let str = chnStr.split('');\\n\\n    for (let i = 0; i < str.length; i++) {\\n        let num = chnNumChar[str[i]];\\n        if (typeof num !== 'undefined') {\\n            number = num;\\n            if (i === str.length - 1) {\\n                section += number;\\n            }\\n        } else {\\n            let unit = chnNameValue[str[i]].value;\\n            secUnit = chnNameValue[str[i]].secUnit;\\n            if (secUnit) {\\n                section = (section + number) * unit;\\n                rtn += section;\\n                section = 0;\\n            } else {\\n                section += (number * unit);\\n            }\\n            number = 0;\\n        }\\n    }\\n    return rtn + section;\\n}\\n\\nfunction nameCompare(a, b) {\\n    if (a == null || b == null)\\n        return a == null ? b == null ? 0 : -1 : 1;\\n\\n    a = a.replace(/([零一二三四五六七八九十百千万亿])/g, function(match, p1, p2, p3, offset, string) {\\n        // p1 is nondigits, p2 digits, and p3 non-alphanumerics\\n        return ChineseToNumber(p1);\\n    })\\n    b = b.replace(/([零一二三四五六七八九十百千万亿])/g, function(match, p1, p2, p3, offset, string) {\\n        // p1 is nondigits, p2 digits, and p3 non-alphanumerics\\n        return ChineseToNumber(p1);\\n    })\\n\\n    let NUMBERS = java.util.regex.Pattern.compile(\\\"(?<=\\\\\\\\D)(?=\\\\\\\\d)|(?<=\\\\\\\\d)(?=\\\\\\\\D)\\\")\\n    let split1 = NUMBERS.split(new java.lang.String(a));\\n    let split2 = NUMBERS.split(new java.lang.String(b));\\n\\n    for (let i = 0; i < Math.min(split1.length, split2.length); i++) {\\n        let c1 = split1[i].charCodeAt(0);\\n        let c2 = split2[i].charCodeAt(0);\\n        let cmp = 0;\\n        let zeroCharCode = '0'.charCodeAt(0);\\n        let nineCharCode = '9'.charCodeAt(0);\\n\\n        if (c1 >= zeroCharCode && c1 <= nineCharCode && c2 >= zeroCharCode && c2 <= nineCharCode) {\\n            cmp = new java.math.BigInteger(split1[i]).compareTo(new java.math.BigInteger(split2[i]));\\n        }\\n\\n        if (cmp === 0) {\\n            let regex = /[a-zA-Z0-9]/\\n            let s1 = String(split1[i])\\n            let s2 = String(split2[i])\\n            if (regex.test(s1) || regex.test(s2)) {\\n                cmp = new java.lang.String(split1[i]).compareTo(new java.lang.String(split2[i]));\\n                // cmp = s1.localeCompare(s2, 'en')\\n            } else {\\n                cmp = s1.localeCompare(s2, 'zh')\\n            }\\n        }\\n\\n        if (cmp !== 0) {\\n            return cmp;\\n        }\\n    }\\n    let lengthCmp = split1.length - split2.length;\\n    // if (lengthCmp !== 0) lengthCmp = lengthCmp > 0 ? -1 : 1;\\n    return lengthCmp;\\n}\\n\\n$.exports.sorts = function(list, sort) {\\n    if (sort === \\\"类型\\\") {\\n        // log(\\\"类型排序\\\");\\n        list.sort(function(a, b) {\\n            return a.type - b.type\\n        });\\n    } else if (sort === \\\"名称\\\") {\\n        // log(\\\"名称排序\\\");\\n        // list.sort(function(a, b) {\\n        //     return a.name.localeCompare(b.name, \\\"zh\\\")\\n        // });\\n        list.sort(function(a, b) {\\n            return nameCompare(a.name||a.title, b.name||b.title);\\n        });\\n    } else if (sort === \\\"大小\\\") {\\n        // log(\\\"大小排序\\\");\\n        list.sort(function(a, b) {\\n            return (a.size || Number(a.size_str) || 0) - (b.size || Number(b.size_str) || 0);\\n        });\\n    }else if (sort === \\\"时间\\\") {\\n        // log(\\\"时间排序\\\");\\n        list.sort(function(a, b) {\\n            return getTimeInt(getTime(a,true)) - getTimeInt(getTime(b,true))\\n        });\\n    }\\n    return list\\n}\\n\\nfunction similar(s, t, f) {//判断两个字符串之间的相似度\\n    if (!s || !t) {\\n        return 0\\n    }\\n    if(s === t){\\n        return 100;\\n    }\\n    var l = s.length > t.length ? s.length : t.length\\n    var n = s.length\\n    var m = t.length\\n    var d = []\\n    f = f || 2\\n    var min = function (a, b, c) {\\n        return a < b ? (a < c ? a : c) : (b < c ? b : c)\\n    }\\n    var i, j, si, tj, cost\\n    if (n === 0) return m\\n    if (m === 0) return n\\n    for (i = 0; i <= n; i++) {\\n        d[i] = []\\n        d[i][0] = i\\n    }\\n    for (j = 0; j <= m; j++) {\\n        d[0][j] = j\\n    }\\n    for (i = 1; i <= n; i++) {\\n        si = s.charAt(i - 1)\\n        for (j = 1; j <= m; j++) {\\n            tj = t.charAt(j - 1)\\n            if (si === tj) {\\n                cost = 0\\n            } else {\\n                cost = 1\\n            }\\n            d[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost)\\n        }\\n    }\\n    let res = (1 - d[n][m] / l) *100\\n    return res.toFixed(f)\\n}\\n\\n$.exports.similar = similar;\\n$.exports.removeExt = function (file){\\n    return file.split('.').slice(0,-1).join('.')\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"u\",\"path\":\"u\",\"rule\":\"$.exports = function(rule, origin, mode) {\\n    return $.toString((rule, origin, mode) => {\\n        let host = origin.replace(new RegExp(\\\"http://|https://\\\"), \\\"\\\").split(\\\"/\\\")[0];\\n        let hosts = host.split(\\\".\\\");\\n        if (hosts.length > 2) {\\n            host = hosts[hosts.length - 2] + \\\".\\\" + hosts[hosts.length - 1];\\n        }\\n        if (input.startsWith(\\\"magnet\\\")) {\\n            confirm({\\n                title: \\\"温馨提示\\\",\\n                content: \\\"检测到新的磁链地址，点击确定按钮即可播放，点击取消按钮可以复制链接\\\",\\n                confirm: $.toString((mag) => {\\n                    return mag;\\n                }, input),\\n                cancel: $.toString((mag) => {\\n                    return \\\"copy://\\\" + mag\\n                }, input)\\n            })\\n            return true;\\n        } else if (input.includes(\\\"aliyundrive.com\\\") && mode != \\\"官方APP\\\") {\\n            log(input);\\n            if (input.includes('checkurl?url=') && input.includes('&urlrefer')) {\\n                input = decodeURIComponent(input.split('&urlrefer')[0].split('checkurl?url=')[1]);\\n                //log('贴吧'+input);\\n            }\\n            return $.toString((url, rule) => {\\n                fy_bridge_app.open(JSON.stringify({\\n                    title: \\\"阿里云盘\\\",\\n                    url: \\\"hiker://page/detail?rule=云盘汇影&url=\\\" + url + '??fypage',\\n                }))\\n            }, input, rule)\\n        } else if (/\\\\.(mp3|flac|m4a)$/.test(input)) {\\n            log(input);\\n            return $.toString((url, rule) => {\\n                fy_bridge_app.playVideo(url);\\n            }, input, rule)\\n        } else if (!input.includes(host) && input.startsWith(\\\"http\\\")) {\\n            log(input);\\n            return $.toString((url, rule, mode) => {\\n                fy_bridge_app.open(JSON.stringify({\\n                    title: \\\"详情\\\",\\n                    url: \\\"hiker://page/ysfx?rule=\\\" + rule + \\\"&r=\\\" + rule + \\\"&mode=\\\" + mode + \\\"##\\\" + url,\\n                }))\\n            }, input, rule, mode);\\n        } else if (!input.startsWith(\\\"http\\\")) {\\n            log(input);\\n            //能唤起APP的白名单\\n            let white = [\\n                \\\"qklink\\\",\\n                \\\"bdnetdisk\\\",\\n                \\\"xunleiapp\\\",\\n                \\\"smartdrive\\\"\\n            ];\\n            let inWhite = white.filter(it => input.startsWith(it)).length > 0;\\n            if (!inWhite) {\\n                return false;\\n            }\\n            return $.toString((url, rule) => {\\n                fy_bridge_app.openThirdApp && fy_bridge_app.openThirdApp(url);\\n            }, input, rule)\\n        } else {\\n\\n        }\\n    }, rule, origin, mode);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"ysfx\",\"path\":\"ysfx\",\"rule\":\"js:\\nvar d = [];\\nlet rule = getParam(\\\"r\\\").split(\\\"##\\\")[0];\\nlet mode = (getParam(\\\"mode\\\") || \\\"\\\").split(\\\"##\\\")[0];\\nlet url = MY_URL.split(\\\"##\\\")[1];\\nlet ite = $.require(\\\"hiker://page/u\\\")(rule, getHome(url), mode);\\nlet js = $.toString(() => {\\n    try {\\n        if (document.title && document.title.length) {\\n            let r = $$$().lazyRule((t) => {\\n                setPageTitle(t);\\n            }, document.title);\\n            fy_bridge_app.parseLazyRule(r);\\n        }\\n    } catch (e) {\\n        fy_bridge_app.log(e.toString());\\n    }\\n});\\nd.push({\\n    title: \\\"\\\",\\n    url: url,\\n    col_type: \\\"x5_webview_single\\\",\\n    desc: \\\"100%&&float\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        urlInterceptor: ite,\\n        js: js,\\n        canBack: true,\\n        jsLoadingInject: true,\\n        floatVideo: true\\n    }\\n});\\nd.push({\\n    col_type: \\\"line\\\",\\n    extra: {\\n        id: url\\n    }\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"阿里lazy\",\"path\":\"alilazy\",\"rule\":\"evalPrivateJS(\\\"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\\\");\"},{\"col_type\":\"movie_3\",\"name\":\"阿里一级\",\"path\":\"sharid\",\"rule\":\"js:\\naddListener('onClose', $.toString(()=>{\\n    clearMyVar('mountzimu');\\n}))\\n\\n//var items = [];\\nfunction formatDate(_date, _fmt) {\\n    let fmt = _fmt || \\\"yyyy-MM-dd HH:mm:ss\\\";\\n    const date = !isNaN(_date) ? new Date(_date * 1000) : new Date(_date);\\n    const o = {\\n        \\\"M+\\\": date.getMonth() + 1, //月份 \\n        \\\"d+\\\": date.getDate(), //日 \\n        \\\"h+\\\": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,\\n        \\\"H+\\\": date.getHours(), //小时 \\n        \\\"m+\\\": date.getMinutes(), //分 \\n        \\\"s+\\\": date.getSeconds(), //秒 \\n        \\\"q+\\\": Math.floor((date.getMonth() + 3) / 3), //季度 \\n        \\\"S\\\": date.getMilliseconds() //毫秒 \\n    };\\n    if (/(y+)/.test(fmt)) {\\n        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \\\"\\\").substr(4 - RegExp.$1.length));\\n    }\\n    for (let k in o) {\\n        if (new RegExp(\\\"(\\\" + k + \\\")\\\").test(fmt)) {\\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\\\"00\\\" + o[k]).substr((\\\"\\\" + o[k]).length)));\\n        }\\n    }\\n    return fmt;\\n};\\n\\nfunction formatSize(size) {\\n    if (!size) {\\n        return '';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\n//log(realurl);\\n\\nif (MY_PAGE == 1) {\\n    clearMyVar('nextpage');\\n}\\nif (MY_PAGE > 1 && getMyVar('nextpage', '') == '') {\\n    log('没有下一页');\\n} else {\\n    try {\\n        //var reftoken = JSON.parse(fetch('hiker://files/rules/xyq/alitoken.json', {})).refresh_token;\\n        var reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\\n        var shareId = decodeURIComponent(realurl).split('com/s/')[1].substring(0, 11);\\n        let getshar = fetch('https://api.aliyundrive.com/adrive/v3/share_link/get_share_by_anonymous', {\\n            headers: {\\n                'Content-Type': 'application/json'\\n            },\\n            body: '{\\\"share_id\\\":\\\"' + shareId + '\\\"}',\\n            method: 'POST'\\n        });\\n        let pushname = JSON.parse(getshar).file_infos[0].file_name;\\n        //var listyp = JSON.parse(getshar).file_infos[0].type;\\n        //var pfileid = JSON.parse(getshar).file_infos[0].file_id;\\n\\n        var sharetoken = JSON.parse(fetch('https://api.aliyundrive.com/v2/share_link/get_share_token', {\\n            headers: {\\n                'Content-Type': 'application/json'\\n            },\\n            body: '{\\\"share_pwd\\\":\\\"\\\",\\\"share_id\\\":\\\"' + shareId + '\\\"}',\\n            method: 'POST'\\n        })).share_token;\\n        //log(sharetoken);\\n\\n        let next = getMyVar('nextpage', '') != '' ? ',\\\"marker\\\":\\\"' + getMyVar('nextpage') + '\\\"' : '';\\n        if (!decodeURIComponent(realurl).includes('/folder/')) {\\n            //if(!listyp == 'folder'){\\n            var rescod = fetch('https://api.aliyundrive.com/adrive/v3/file/list', {\\n                headers: {\\n                    'Content-Type': 'application/json',\\n                    'X-Share-Token': sharetoken\\n                },\\n                body: '{\\\"share_id\\\":\\\"' + shareId + '\\\",\\\"parent_file_id\\\":\\\"root\\\",\\\"limit\\\":100,\\\"image_thumbnail_process\\\":\\\"image/resize,w_160/format,jpeg\\\",\\\"image_url_process\\\":\\\"image/resize,w_1920/format,jpeg\\\",\\\"video_thumbnail_process\\\":\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\\"order_by\\\":\\\"name\\\",\\\"order_direction\\\":\\\"ASC\\\"' + next + '}',\\n                method: 'POST'\\n            });\\n            //log(rescod);\\n            var listyp = JSON.parse(rescod).items[0].type;\\n            var pfileid = JSON.parse(rescod).items[0].file_id;\\n        } else {\\n            var listyp = 'folder';\\n            var pfileid = decodeURIComponent(realurl).split('folder/')[1]\\n\\n        }\\n        //log(html);\\n        if (listyp == 'folder') {\\n            var rescod = fetch('https://api.aliyundrive.com/adrive/v3/file/list', {\\n                headers: {\\n                    'Content-Type': 'application/json',\\n                    'X-Share-Token': sharetoken\\n                },\\n                body: '{\\\"share_id\\\":\\\"' + shareId + '\\\",\\\"parent_file_id\\\":\\\"' + pfileid + '\\\",\\\"limit\\\":100,\\\"image_thumbnail_process\\\":\\\"image/resize,w_160/format,jpeg\\\",\\\"image_url_process\\\":\\\"image\\\\/resize,w_1920/format,jpeg\\\",\\\"video_thumbnail_process\\\":\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\\"order_by\\\":\\\"name\\\",\\\"order_direction\\\":\\\"ASC\\\"' + next + '}',\\n                method: 'POST'\\n            });\\n\\n        } //取文件夹\\n        //log(rescod);\\n\\n        if (JSON.parse(rescod).next_marker) {\\n            let marker = JSON.parse(rescod).next_marker;\\n            if (marker.length > 10) {\\n                putMyVar('nextpage', marker);\\n            } else {\\n                clearMyVar('nextpage');\\n            }\\n        }\\n        var conts = JSON.parse(rescod).items;\\n        var zimulist = [];\\n        conts.forEach(item => {\\n            if (config.subs.includes(item.file_extension)) {\\n                zimulist.push({\\n                    ext: item.file_extension,\\n                    file_id: item.file_id,\\n                    name: item.name.replace('.' + item.file_extension, '')\\n                })\\n            }\\n        })\\n\\n        var tuisong = [];\\n        for (var i in conts) {\\n            var listyp = conts[i].type;\\n            if (listyp != 'folder') {\\n                var zimu = {};\\n                var cate = conts[i].category;\\n                var fname = conts[i].name;\\n                var name = fname.replace(conts[i].file_extension, '');\\n\\n                var idx = zimulist.findIndex(x => name.includes(x.name));\\n                if (idx !== -1 && !config.subs.includes(conts[i].file_extension)) {\\n                    zimulist.splice(idx, 1);\\n                    zimu = zimulist[idx];\\n                }\\n\\n                var longc = [];\\n                let subname = storage0.getMyVar('mountzimu', '');\\n                if (config.subs.includes(conts[i].file_extension)) {\\n                    var item = conts[i];\\n                    var zm = {\\n                        ext: item.file_extension,\\n                        file_id: item.file_id,\\n                        name: item.name.replace('.' + item.file_extension, '')\\n                    }\\n                    longc = [{\\n                        title: \\\"挂载字幕: \\\" + (subname == '' ? '无' : subname.name+'.'+subname.ext),\\n                        js: $.toString((zm) => {\\n                            storage0.putMyVar('mountzimu', zm);\\n                            return 'toast://挂载完成，当前字幕文件: ' + zm.name+'.'+zm.ext;\\n                        }, zm),\\n                    }]\\n                } else {\\n                    longc = [{\\n                        title: \\\"当前挂载字幕: \\\" + (subname == '' ? '无' : subname.name+'.'+subname.ext),\\n                        js: $.toString(() => {\\n                            return 'hiker://empty';\\n                        }),\\n                    }];\\n                }\\n\\n\\n                if (cate == 'video') {\\n                    var title = '📺' + conts[i].name;\\n                } else if (cate == 'doc') {\\n                    var title = '📖' + conts[i].name;\\n                } else if (cate == 'image') {\\n                    var title = '🖼' + conts[i].name;\\n                } else if (cate == 'zip') {\\n                    var title = '📦' + conts[i].name;\\n                } else {\\n                    var title = conts[i].name\\n                }\\n            \\n                items.push({\\n                    title: title,\\n                    url: $(conts[i].file_id).lazyRule((shareId, sharetoken, cate, fname, reftoken, zimu) => {\\n                        return $.require(\\\"hiker://page/alilazy\\\")(shareId, input, cate, zimu);\\n                    }, shareId, sharetoken, cate, fname, reftoken, zimu),\\n                    desc: formatDate(conts[i].updated_at) + '  ' + formatSize(conts[i].size),\\n                    extra: {\\n                        id: conts[i].file_id,\\n                        longClick:longc\\n                    },\\n                    col_type: 'text_1'\\n\\n                });\\n            } else {\\n                items.push({\\n                    title: '📂' + conts[i].name,\\n                    url: $('hiker://empty' + conts[i].file_id + '???fypage').rule((shareId, sharetoken, pushname) => {\\n                        eval(JSON.parse(fetch('hiker://page/ruleloop', {})).rule);\\n                    }, shareId, sharetoken, conts[i].name),\\n                    col_type: 'flex_button'\\n                });\\n\\n            } //end if\\n        } //end for i\\n    } catch (e) {\\n        items.push({\\n            title: '欧欧，报错了。',\\n            url: decodeURIComponent(getResCode().split('##')[1]),\\n            col_type: 'text_center_1'\\n        });\\n    }\\n}\\n/*\\nsetHomeResult({\\n    data: items\\n});\\n*/\"},{\"col_type\":\"movie_3\",\"name\":\"阿里嵌套\",\"path\":\"ruleloop\",\"rule\":\"var items = [];\\n\\nfunction formatDate(_date, _fmt) {\\n    let fmt = _fmt || \\\"yyyy-MM-dd HH:mm:ss\\\";\\n    const date = !isNaN(_date) ? new Date(_date * 1000) : new Date(_date);\\n    const o = {\\n        \\\"M+\\\": date.getMonth() + 1, //月份 \\n        \\\"d+\\\": date.getDate(), //日 \\n        \\\"h+\\\": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,\\n        \\\"H+\\\": date.getHours(), //小时 \\n        \\\"m+\\\": date.getMinutes(), //分 \\n        \\\"s+\\\": date.getSeconds(), //秒 \\n        \\\"q+\\\": Math.floor((date.getMonth() + 3) / 3), //季度 \\n        \\\"S\\\": date.getMilliseconds() //毫秒 \\n    };\\n    if (/(y+)/.test(fmt)) {\\n        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \\\"\\\").substr(4 - RegExp.$1.length));\\n    }\\n    for (let k in o) {\\n        if (new RegExp(\\\"(\\\" + k + \\\")\\\").test(fmt)) {\\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\\\"00\\\" + o[k]).substr((\\\"\\\" + o[k]).length)));\\n        }\\n    }\\n    return fmt;\\n};\\n\\nfunction formatSize(size) {\\n    if (!size) {\\n        return '';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\n//let tvip = getItem('hikertvboxset', '');\\n\\n//log(getResCode());\\nif (MY_PAGE == 1) {\\n    clearMyVar('nextpage');\\n}\\nif (MY_PAGE > 1 && getMyVar('nextpage', '') == '') {\\n    log('没有下一页');\\n} else {\\n    let reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\\n\\n    let next = getMyVar('nextpage', '') != '' ? ',\\\"marker\\\":\\\"' + getMyVar('nextpage') + '\\\"' : '';\\n\\n    var rescod = fetch('https://api.aliyundrive.com/adrive/v3/file/list', {\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'X-Share-Token': sharetoken\\n        },\\n        body: '{\\\"share_id\\\":\\\"' + shareId + '\\\",\\\"parent_file_id\\\":\\\"' + getResCode().split('???')[0] + '\\\",\\\"limit\\\":100,\\\"image_thumbnail_process\\\":\\\"image/resize,w_160/format,jpeg\\\",\\\"image_url_process\\\":\\\"image\\\\/resize,w_1920/format,jpeg\\\",\\\"video_thumbnail_process\\\":\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\\"order_by\\\":\\\"name\\\",\\\"order_direction\\\":\\\"ASC\\\"' + next + '}',\\n        method: 'POST'\\n    });\\n    //log(rescod);\\n    if (JSON.parse(rescod).next_marker) {\\n        let marker = JSON.parse(rescod).next_marker;\\n        if (marker.length > 10) {\\n            putMyVar('nextpage', marker);\\n        } else {\\n            clearMyVar('nextpage');\\n        }\\n    }\\n    var conts = JSON.parse(rescod).items;\\n    var zimulist = [];\\n    conts.forEach(item => {\\n        if (config.subs.includes(item.file_extension)) {\\n            zimulist.push({\\n                ext: item.file_extension,\\n                file_id: item.file_id,\\n                name: item.name.replace('.' + item.file_extension, '')\\n            })\\n        }\\n    })\\n    var tuisong = [];\\n    for (var i in conts) {\\n        var listyp = conts[i].type;\\n        if (listyp != 'folder') {\\n            var zimu = {};\\n            var cate = conts[i].category;\\n            var fname = conts[i].name;\\n            var name = fname.replace(conts[i].file_extension, '');\\n\\n            var idx = zimulist.findIndex(x => name.includes(x.name));\\n            if (idx !== -1 && !config.subs.includes(conts[i].file_extension)) {\\n                zimulist.splice(idx, 1);\\n                zimu = zimulist[idx];\\n            }\\n\\n            var cate = conts[i].category;\\n            var fname = conts[i].name;\\n            if (cate == 'video') {\\n                var title = '📺' + conts[i].name;\\n            } else if (cate == 'doc') {\\n                var title = '📖' + conts[i].name;\\n            } else if (cate == 'image') {\\n                var title = '🖼' + conts[i].name;\\n            } else if (cate == 'zip') {\\n                var title = '📦' + conts[i].name;\\n            } else {\\n                var title = conts[i].name\\n            }\\n\\n            var longc = [];\\n            let subname = storage0.getMyVar('mountzimu', '');\\n            if (config.subs.includes(conts[i].file_extension)) {\\n                var item = conts[i];\\n                var zm = {\\n                    ext: item.file_extension,\\n                    file_id: item.file_id,\\n                    name: item.name.replace('.' + item.file_extension, '')\\n                }\\n                longc = [{\\n                    title: \\\"挂载字幕: \\\" + (subname == '' ? '无' : subname.name+'.'+subname.ext),\\n                    js: $.toString((zm) => {\\n                        storage0.putMyVar('mountzimu', zm);\\n                        return 'toast://挂载完成，当前字幕文件: ' + zm.name+'.'+zm.ext;\\n                    }, zm),\\n                }]\\n            } else {\\n                longc = [{\\n                    title: \\\"当前挂载字幕: \\\" + (subname == '' ? '无' : subname.name+'.'+subname.ext),\\n                    js: $.toString(() => {\\n                        return 'hiker://empty';\\n                    }),\\n                }];\\n            }\\n\\n            items.push({\\n                title: title,\\n                url: $(conts[i].file_id).lazyRule((shareId, sharetoken, cate, fname, reftoken,zimu) => {\\n                    return $.require(\\\"hiker://page/alilazy\\\")(shareId, input, cate,zimu);\\n                }, shareId, sharetoken, cate, fname, reftoken,zimu),\\n                desc: formatDate(conts[i].updated_at) + '  ' + formatSize(conts[i].size),\\n                extra: {\\n                    id: conts[i].file_id,\\n                    longClick: longc\\n                },\\n                col_type: 'text_1'\\n\\n            });\\n        } else {\\n            items.push({\\n                title: '📂' + conts[i].name,\\n                url: $('hiker://empty' + conts[i].file_id + '???fypage').rule((shareId, sharetoken, pushname) => {\\n                    eval(JSON.parse(fetch('hiker://page/ruleloop', {})).rule);\\n                }, shareId, sharetoken, conts[i].name),\\n                col_type: 'flex_button'\\n            });\\n\\n        } //end if\\n\\n    }\\n}\\nsetResult(items);\"},{\"col_type\":\"movie_3\",\"name\":\"阿里推送\",\"path\":\"push\",\"rule\":\"js:\\n//log(MY_URL);\\nvar items = [];\\nvar realurl = MY_URL.split('##')[1].split('???')[0];\\nif (decodeURIComponent(realurl).includes('www.aliyundrive') && !realurl.includes('%3B%7B')) {\\n    eval(JSON.parse(fetch('hiker://page/sharid', {})).rule)\\n}\\nsetResult(items);\"}]","icon":"","proxy":""}